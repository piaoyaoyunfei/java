[TOC]

#泛型总结:

---

```
    泛型是在编译阶段生效，运行阶段泛型的类型被擦除。
    通过泛型可以完成对一组类的操作对外开放相同的接口。最典型的就是各种容器类，如：List、Set、Map
    该部分从泛型的几个方面对泛型做一些记录和学习
```

## 目录

- [泛型类](###泛型类)

- [泛型接口](###泛型接口)

- [泛型方法](###泛型方法)

- [泛型边界](###泛型边界)

- [泛型数组](###泛型数组)

- [泛型结论](###结论)

###泛型类
  1. 泛型类的使用
```java

   public class GenericClass<T> {}

```
  2. 泛型类的使用和说明
  
   - 泛型类的两种使用方式:
   
     a、不指定泛型类型
   
     b、指定泛型类型 这种情况下 类型参数已经确定
     
   - 使用示例:
   
      ```java
      //不指定泛型类的类型
      GenericClass genericClass = new GenericClass();
      ```
      ```java
      //指定泛型类的类型
      GenericClass<String> genericString = new GenericClass<>();
      ```
     

###泛型接口
   - 接口定义
   ```java
        public interface Generator<T> {}
   ```
   - 接口使用
     
     接口的使用和类相似，只要实现类的时候指定泛型类型、或者不指定泛型类型这样就和类对应起来
     
###泛型方法
   - 方法定义
   
     - public 与 返回值中间<T>非常重要，可以理解为声明此方法为泛型方法
     
     - 泛型方法和泛型类或者泛型接口中的字符串没有必然关系
     
     - 与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型
     
     - 静态方法无法访问类上定义的泛型；如果静态方法操作的引用数据类型不确定的时候，必须要将泛型定义在方法上
   
   - 方法的使用
     ```java
        public <T> void showName_1(T t) {}
        
        public <T, V> V showName_2(T t,V v) {}
   
        public <E> void showName_3(E... e) {}
   
        public static <T> String getName(T t) {}
                
     ```

###泛型边界
   - 无边界使用
   
    `输入输出不限制，输入可变所以无法进行有效的输入，输出没有限制`
    
   - 下边界泛型使用
   
    `输入限制了必须是指定类型的子类或者本身 因为泛型规定的类型特性在子类中肯定是有的 输出没有限制 父类没有上线 object`
    
   - 上边界泛型使用
   
    `输入仅仅指定了最少的类型特性，所以输入对象可变，无法进行有效输入 输出限制了泛型类型，因为所有的对象都继承了泛型类型，所有输出都是泛型类型`    

###泛型数组 

    - 在Java中，我们不能实例化（注意我说的是实例化）一个参数化类型的数组，
    但是却可以参数化数组本身的类型(简单解释一下 java中我们是可以把数组的元素设置为一个泛型 即参数化数组本身的类型,但是我们不可以实例化也就是new一个数组 数组的元素是包含泛型类型的对象 即 list<T>[])

###结论
    泛型实际上只在编译阶段有效，在运行阶段泛型已经擦除。在泛型使用中注意数组的声明，同时注意上线边界的使用
    这是泛型的基础篇，后边会更新泛型的使用篇。


_参考文档地址:_

- [泛型参考](https://blog.csdn.net/s10461/article/details/53941091>)
- [泛型边界参考1](https://blog.csdn.net/renwuqiangg/article/details/51296621)
- [泛型边界参考2](https://blog.csdn.net/lihuihao2/article/details/93648515)
- [泛型数组参考1](https://www.cnblogs.com/MrJR/p/10463479.html)
- [泛型数组参考2](https://www.cnblogs.com/minghaiJ/p/11259318.html)


---


